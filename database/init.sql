create type public.user_status as enum ('ONLINE', 'OFFLINE');

-- USERS
create table public.users (
  id          uuid references auth.users on delete cascade not null primary key, -- UUID from auth.users
  username    text,
  status      user_status default 'OFFLINE'::public.user_status
);
alter table public.users enable row level security; 
create policy "Allow everyone to read" on public.users for select using (true);
CREATE POLICY "Allow authenticated users to insert" ON public.users FOR INSERT TO authenticated WITH CHECK (true);

-- QUIZ_ATTEMPTS
create table public.quiz_attempt (
  id            bigint generated by default as identity primary key,
  created_by    uuid references public.users on delete cascade not null,
  inserted_at   timestamp with time zone default timezone('utc'::text, now()) not null
);
alter table public.quiz_attempt enable row level security;
create policy "Allow everyone to read" on public.quiz_attempt for select using (true);
CREATE POLICY "Allow authenticated users to insert" ON public.quiz_attempt FOR INSERT TO authenticated WITH CHECK (true);

-- QUIZ_ENTRIES
create table public.quiz_entry (
  attempt_id    bigint not null,
  sequence      int not null,
  process       text not null,
  CONSTRAINT quiz_entry_pkey PRIMARY KEY (attempt_id, sequence),
  CONSTRAINT quiz_attempt_entry_fkey FOREIGN KEY (attempt_id) REFERENCES public.quiz_attempt(id) on delete cascade 
);
alter table public.quiz_entry enable row level security;
create policy "Allow everyone to read" on public.quiz_entry for select using (true);
CREATE POLICY "Allow authnticated users to insert" ON public.quiz_entry FOR INSERT TO authenticated WITH CHECK (true);

-- RESET REPLICATION
begin;
  -- remove the supabase_realtime publication
  drop publication if exists supabase_realtime;

  -- re-create the supabase_realtime publication with no tables
  create publication supabase_realtime;
commit;

-- add a table to the publication
alter publication supabase_realtime add table public.quiz_attempt;

