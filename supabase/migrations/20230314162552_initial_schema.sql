create type "public"."user_status" as enum ('ONLINE', 'OFFLINE');

create table "public"."quiz_attempt" (
    "id" bigint generated by default as identity not null,
    "created_by" uuid not null,
    "inserted_at" timestamp with time zone not null default timezone('utc'::text, now())
);


alter table "public"."quiz_attempt" enable row level security;

create table "public"."quiz_entry" (
    "attempt_id" bigint not null,
    "sequence" integer not null,
    "process" text not null
);


alter table "public"."quiz_entry" enable row level security;

create table "public"."users" (
    "id" uuid not null,
    "username" text,
    "status" user_status default 'OFFLINE'::user_status
);


alter table "public"."users" enable row level security;

CREATE UNIQUE INDEX quiz_attempt_pkey ON public.quiz_attempt USING btree (id);

CREATE UNIQUE INDEX quiz_entry_pkey ON public.quiz_entry USING btree (attempt_id, sequence);

CREATE UNIQUE INDEX users_pkey ON public.users USING btree (id);

alter table "public"."quiz_attempt" add constraint "quiz_attempt_pkey" PRIMARY KEY using index "quiz_attempt_pkey";

alter table "public"."quiz_entry" add constraint "quiz_entry_pkey" PRIMARY KEY using index "quiz_entry_pkey";

alter table "public"."users" add constraint "users_pkey" PRIMARY KEY using index "users_pkey";

alter table "public"."quiz_attempt" add constraint "quiz_attempt_created_by_fkey" FOREIGN KEY (created_by) REFERENCES users(id) ON DELETE CASCADE not valid;

alter table "public"."quiz_attempt" validate constraint "quiz_attempt_created_by_fkey";

alter table "public"."quiz_entry" add constraint "quiz_attempt_entry_fkey" FOREIGN KEY (attempt_id) REFERENCES quiz_attempt(id) ON DELETE CASCADE not valid;

alter table "public"."quiz_entry" validate constraint "quiz_attempt_entry_fkey";

alter table "public"."users" add constraint "users_id_fkey" FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."users" validate constraint "users_id_fkey";

create policy "Allow authenticated users to insert"
on "public"."quiz_attempt"
as permissive
for insert
to authenticated
with check (true);


create policy "Allow everyone to read"
on "public"."quiz_attempt"
as permissive
for select
to public
using (true);


create policy "Allow authnticated users to insert"
on "public"."quiz_entry"
as permissive
for insert
to authenticated
with check (true);


create policy "Allow everyone to read"
on "public"."quiz_entry"
as permissive
for select
to public
using (true);


create policy "Allow authenticated users to insert"
on "public"."users"
as permissive
for insert
to authenticated
with check (true);


create policy "Allow everyone to read"
on "public"."users"
as permissive
for select
to public
using (true);



